ms_count <- ms %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup()
count_total <- toString(ms_count$total)
count_total
# New row with summed information
new_row <- data.frame(
grupo_de_edad = "15_a_24", estado_civil = "total",
sexo = "total", total = count_total,
stringsAsFactors = FALSE
)
# Final dataframe with counts for each group independently and together
ms_f <- rbind(ms, new_row)
head(ms_f)
# Filter of literacy data to get only the counts for specific conditions
lit_filt <- literacy %>%
subset(municipio == "Villapinzón" & sabe_leer_y_escribir == "no" &
grupo_de_edad == "entre_15_y_24_anos" & area == "total") %>%
select(sabe_leer_y_escribir, grupo_de_edad, sexo, total) %>%
mutate(estado = "no_sabe_leer_y_escribir") %>%
select(-sabe_leer_y_escribir) %>%
mutate(proportion = total / lit$total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt15 <- marital_status %>%
subset(municipio == "Villapinzón" & area == "total" &
grupo_de_edad == "15_a_19") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt20 <- marital_status %>%
subset(municipio == "Villapinzón" & area == "total" &
grupo_de_edad == "20_a_24") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Merge of both marital status dataframes
ms_filt <- rbind(ms_filt15, ms_filt20)
# Data frame with marital status info and proportions based on columns
ms_final <- ms_filt %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup() %>%
mutate(grupo_de_edad = "entre_15_y_24_anos") %>%
rename(estado = estado_civil) %>%
mutate(proportion = total / lit$total)
# Merged marital status and literacy final df, with subsets to a better graph
merged_df <- bind_rows(lit_filt, ms_final) %>%
subset(sexo != "total") %>%
subset(estado != "total") %>%
subset(estado != "soltero_a")
# Plot
ggplot(merged_df, aes(x = estado, y = proportion, fill = sexo)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(
values = c(mujer = "#f04a4c", hombre = "#aec800"),
labels = c("Female", "Male")
) +
labs(
title = "Proportion of people in Villapinzón by marital status and
iliteracy by sex",
x = "Status",
y = "Count",
fill = "Sex"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Download data
asen <- download_demographic("DANE_PP_1950_2070_ASEN")
# Subset data
male <- asen %>%
subset(area == "total" & sexo == "total_hombres" & ano > 2018)
female <- asen %>%
subset(area == "total" & sexo == "total_mujeres" & ano > 2018)
mandf <- bind_rows(male, female)
# Plot of population in a national level by year and sex
ggplot(mandf, aes(x = ano, y = total, fill = sexo)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(
values = c(total_mujeres = "#f04a4c", total_hombres = "#aec800"),
labels = c("Female", "Male")
) +
labs(
title = "Population in Colombia from 2019 to 2070 by sex",
x = "Year",
y = "Population",
fill = "Sex"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Literacy data filter to have a population's count under specific conditions
lit <- literacy %>%
subset(municipio == "Neiva" & grupo_de_edad == "entre_15_y_24_anos" &
area == "total" & sabe_leer_y_escribir == "total" & sexo == "total") %>%
select(municipio, area, grupo_de_edad, sexo, total)
# Marital status data filter to find population's count under certain conditions
ms <- marital_status %>%
subset(municipio == "Neiva" & area == "total" &
grupo_de_edad == c("15_a_19", "20_a_24") & estado_civil == "total" &
sexo == "total") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Sum of counts of both age groups
ms_count <- ms %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup()
count_total <- toString(ms_count$total)
# New row with summed information
new_row <- data.frame(
grupo_de_edad = "15_a_24", estado_civil = "total",
sexo = "total", total = count_total,
stringsAsFactors = FALSE
)
# Final dataframe with counts for each group independently and together
ms_f <- rbind(ms, new_row)
head(ms_f)
# Filter of literacy data to get only the counts for specific conditions
lit_filt <- literacy %>%
subset(municipio == "Neiva" & sabe_leer_y_escribir == "no" &
grupo_de_edad == "entre_15_y_24_anos" & area == "total") %>%
select(sabe_leer_y_escribir, grupo_de_edad, sexo, total) %>%
mutate(estado = "no_sabe_leer_y_escribir") %>%
select(-sabe_leer_y_escribir) %>%
mutate(proportion = total / lit$total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt15 <- marital_status %>%
subset(municipio == "Neiva" & area == "total" &
grupo_de_edad == "15_a_19") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt20 <- marital_status %>%
subset(municipio == "Neiva" & area == "total" &
grupo_de_edad == "20_a_24") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Merge of both marital status dataframes
ms_filt <- rbind(ms_filt15, ms_filt20)
# Data frame with marital status info and proportions based on columns
ms_final <- ms_filt %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup() %>%
mutate(grupo_de_edad = "entre_15_y_24_anos") %>%
rename(estado = estado_civil) %>%
mutate(proportion = total / lit$total)
# Merged marital status and literacy final df, with subsets to a better graph
merged_df <- bind_rows(lit_filt, ms_final) %>%
subset(sexo != "total") %>%
subset(estado != "total") %>%
subset(estado != "soltero_a")
# Plot
ggplot(merged_df, aes(x = estado, y = proportion, fill = sexo)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(
values = c(mujer = "#f04a4c", hombre = "#aec800"),
labels = c("Female", "Male")
) +
labs(
title = "Proportion of people in Villapinzón by marital status and
iliteracy by sex",
x = "Status",
y = "Count",
fill = "Sex"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Filter of literacy data to get only the counts for specific conditions
lit_filt <- literacy %>%
subset(municipio == "Tunja" & sabe_leer_y_escribir == "no" &
grupo_de_edad == "entre_15_y_24_anos" & area == "total") %>%
select(sabe_leer_y_escribir, grupo_de_edad, sexo, total) %>%
mutate(estado = "no_sabe_leer_y_escribir") %>%
select(-sabe_leer_y_escribir) %>%
mutate(proportion = total / lit$total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt15 <- marital_status %>%
subset(municipio == "Tunja" & area == "total" &
grupo_de_edad == "15_a_19") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt20 <- marital_status %>%
subset(municipio == "Tunja" & area == "total" &
grupo_de_edad == "20_a_24") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Merge of both marital status dataframes
ms_filt <- rbind(ms_filt15, ms_filt20)
# Data frame with marital status info and proportions based on columns
ms_final <- ms_filt %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup() %>%
mutate(grupo_de_edad = "entre_15_y_24_anos") %>%
rename(estado = estado_civil) %>%
mutate(proportion = total / lit$total)
# Merged marital status and literacy final df, with subsets to a better graph
merged_df <- bind_rows(lit_filt, ms_final) %>%
subset(sexo != "total") %>%
subset(estado != "total") %>%
subset(estado != "soltero_a")
# Plot
ggplot(merged_df, aes(x = estado, y = proportion, fill = sexo)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(
values = c(mujer = "#f04a4c", hombre = "#aec800"),
labels = c("Female", "Male")
) +
labs(
title = "Proportion of people in Villapinzón by marital status and
iliteracy by sex",
x = "Status",
y = "Count",
fill = "Sex"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Literacy data filter to have a population's count under specific conditions
lit <- literacy %>%
subset(municipio == "Villavicencio" & grupo_de_edad == "entre_15_y_24_anos" &
area == "total" & sabe_leer_y_escribir == "total" & sexo == "total") %>%
select(municipio, area, grupo_de_edad, sexo, total)
# Marital status data filter to find population's count under certain conditions
ms <- marital_status %>%
subset(municipio == "Villavicencio" & area == "total" &
grupo_de_edad == c("15_a_19", "20_a_24") & estado_civil == "total" &
sexo == "total") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Sum of counts of both age groups
ms_count <- ms %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup()
count_total <- toString(ms_count$total)
# New row with summed information
new_row <- data.frame(
grupo_de_edad = "15_a_24", estado_civil = "total",
sexo = "total", total = count_total,
stringsAsFactors = FALSE
)
# Final dataframe with counts for each group independently and together
ms_f <- rbind(ms, new_row)
head(ms_f)
# Filter of literacy data to get only the counts for specific conditions
lit_filt <- literacy %>%
subset(municipio == "Villavicencio" & sabe_leer_y_escribir == "no" &
grupo_de_edad == "entre_15_y_24_anos" & area == "total") %>%
select(sabe_leer_y_escribir, grupo_de_edad, sexo, total) %>%
mutate(estado = "no_sabe_leer_y_escribir") %>%
select(-sabe_leer_y_escribir) %>%
mutate(proportion = total / lit$total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt15 <- marital_status %>%
subset(municipio == "Villavicencio" & area == "total" &
grupo_de_edad == "15_a_19") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Filter of marital status data to get only the counts for specific conditions
ms_filt20 <- marital_status %>%
subset(municipio == "Villavicencio" & area == "total" &
grupo_de_edad == "20_a_24") %>%
select(grupo_de_edad, estado_civil, sexo, total)
# Merge of both marital status dataframes
ms_filt <- rbind(ms_filt15, ms_filt20)
# Data frame with marital status info and proportions based on columns
ms_final <- ms_filt %>%
group_by(estado_civil, sexo) %>%
dplyr::summarise(total = sum(total)) %>%
ungroup() %>%
mutate(grupo_de_edad = "entre_15_y_24_anos") %>%
rename(estado = estado_civil) %>%
mutate(proportion = total / lit$total)
# Merged marital status and literacy final df, with subsets to a better graph
merged_df <- bind_rows(lit_filt, ms_final) %>%
subset(sexo != "total") %>%
subset(estado != "total") %>%
subset(estado != "soltero_a")
# Plot
ggplot(merged_df, aes(x = estado, y = proportion, fill = sexo)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(
values = c(mujer = "#f04a4c", hombre = "#aec800"),
labels = c("Female", "Male")
) +
labs(
title = "Proportion of people in Villapinzón by marital status and
iliteracy by sex",
x = "Status",
y = "Count",
fill = "Sex"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Plot
ggplot(merged_df, aes(x = estado, y = proportion, fill = sexo)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(
values = c(mujer = "#f04a4c", hombre = "#aec800"),
labels = c("Female", "Male")
) +
labs(
title = "Proportion of people in Villapinzón by marital status and
iliteracy by sex",
x = "Status",
y = "Count",
fill = "Sex"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Subset data
male_2052_99 <- asen %>%
subset(area == "total" & ano == 2052 & sexo == "hombre" &
edad != "100_y_mas") %>%
mutate(edad = as.numeric(edad))
male_2052_100 <- asen %>%
subset(area == "total" & ano == 2052 & sexo == "hombre" &
edad == "100_y_mas") %>%
rename(age_group = edad) %>%
rename(total_sum = total) %>%
select(age_group, total_sum)
# Define age groups
age_groups <- cut(male_2052_99$edad,
breaks = c(-1, 2, 12, 19, 29, 39, 49, 59, 69, 79, 89, 99),
labels = c(
"0-2", "3-12", "13-19", "20-29", "30-39", "40-49",
"50-59", "60-69", "70-79", "80-89", "90-99"
)
)
# Add age groups to the data frame
male_agegroups <- mutate(male_2052_99, age_group = age_groups)
# Calculate new totals for age groups
summarized_data <- male_agegroups %>%
group_by(age_group) %>%
summarize(total_sum = sum(total))
# Bind dataframes
merged <- bind_rows(summarized_data, male_2052_100)
# Fix the order of ages appearance in the plot
merged$age_group <- factor(merged$age_group, levels = unique(merged$age_group))
# Plot of male population in a national level by age group in 2052
ggplot(merged, aes(
x = age_group,
y = total_sum
)) +
geom_bar(stat = "identity", fill = "#f04a4c", color = "black", width = 0.6) +
labs(
title = "Male population counts in Colombia by age group in 2052",
x = "Age group",
y = "Male population"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
head(asen)
View(asen)
unique(asen$departamento)
unique(asen$codigo_departamento)
library(ColOpenData)
library(dplyr)
library(sf)
library(ggplot2)
library(leaflet)
# Download complete dataset
secu <- download_geospatial(
dataset = "DANE_MGN_2018_SECU",
include_geom = TRUE,
include_cnpv = TRUE
)
head(secu)
# Urban section dictionary
dict <- dictionary("DANE_MGN_2018_SECU")
head(dict)
# Filter for Tunja
tunja <- secu %>% filter(MPIO_CDPMP == "15001")
# Calculate internet coverage percentage
tunja <- tunja %>% mutate(INT_PERC = round(STP19_INT1 / STVIVIENDA, 2))
ggplot(data = tunja) +
geom_sf(mapping = aes(fill = INT_PERC), color = NA)
# Filter for Tunja
tunja <- secu %>% filter(MPIO_CDPMP == "41001")
# Calculate internet coverage percentage
tunja <- tunja %>% mutate(INT_PERC = round(STP19_INT1 / STVIVIENDA, 2))
ggplot(data = tunja) +
geom_sf(mapping = aes(fill = INT_PERC), color = NA)
# ggplot2
ggplot(data = tunja) +
geom_sf(mapping = aes(fill = INT_PERC), color = NA) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
) +
scale_fill_gradient("Percentage", low = "#10bed2", high = "#deff00") +
ggtitle(
label = "Internet coverage",
subtitle = "Tunja, Colombia"
)
# Color Palette
colfunc <- colorRampPalette(c("#10bed2", "#deff00"))
pal <- colfunc(100)
# Leaflet
leaflet(tunja) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
stroke = TRUE,
weight = 0,
color = NA,
fillColor = ~pal,
fillOpacity = 1,
popup = paste0(tunja$INT_PERC)
)
library(ColOpenData)
library(sf)
library(leaflet)
library(ggplot2)
# Define coordinates (bounding box around Manizales)
lat <- c(5.166278, 5.166278, 4.982247, 4.982247, 5.166278)
lon <- c(-75.678072, -75.327859, -75.327859, -75.678072, -75.678072)
# Use sf to create a polygon and turn it into a geometry
polygon <- st_polygon(x = list(cbind(lon, lat))) %>% st_sfc()
# Turn geometry into sf object
roi<- st_as_sf(polygon)
# Plot polygon for reference
leaflet(roi) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
stroke = TRUE,
weight = 2,
color = "#2e6930",
fillColor = "#2e6930",
opacity = 0.6
)
stations <- stations_in_roi(roi)
head(stations)
# Working stations after 2013
w_stations <- stations %>%
dplyr::filter(as.Date(fecha_suspension) > as.Date("2013-01-01") |
estado == "Activa")
# Filtering for categories
cw_stations <- w_stations %>% dplyr::filter(categoria %in%
c("Climática Principal", "Climática Ordinaria"))
# General information of stations
head(cw_stations)
max_temperature_stations <- download_climate_stations(
stations = w_stations,
start_date = "2013-01-01",
end_date = "2016-12-31",
tag = "TMX_CON"
)
head(max_temperature_stations)
ggplot(data = max_temperature_stations) +
geom_line(aes(x = date, y = value, group = station), color = "#106ba0") +
ggtitle("Max Temperature in Manizales by station") +
xlab("Date") +
ylab("Temperature [°C]") +
theme_bw() +
facet_grid(rows = vars(station))
ggplot(data = max_temperature_month) +
geom_line(aes(x = date, y = value, group = station), color = "#106ba0") +
ggtitle("Dry-bulb Temperature") +
xlab("Date") +
ylab("Dry-bulb temperature [C]") +
theme_bw() +
facet_grid(rows = vars(station))
max_temperature_month <- max_temperature_stations %>% aggregate_climate("month")
ggplot(data = max_temperature_month) +
geom_line(aes(x = date, y = value, group = station), color = "#106ba0") +
ggtitle("Dry-bulb Temperature") +
xlab("Date") +
ylab("Dry-bulb temperature [C]") +
theme_bw() +
facet_grid(rows = vars(station))
max_temperature_roi <- download_climate_geom(
geometry = roi,
start_date = "2013-01-01",
end_date = "2016-12-31",
tag = "TMX_CON"
) %>% aggregate_climate("month")
ggplot(data = max_temperature_roi) +
geom_line(aes(x = date, y = value, group = station), color = "#106ba0") +
ggtitle("Dry-bulb Temperature") +
xlab("Date") +
ylab("Dry-bulb temperature [C]") +
theme_bw() +
facet_grid(rows = vars(station))
max_temperature_mpio <- download_climate(
code = "17001",
start_date = "2013-01-01",
end_date = "2016-12-31",
tag = "TMX_CON"
) %>% aggregate_climate("month")
ggplot(data = max_temperature_mpio) +
geom_line(aes(x = date, y = value, group = station), color = "#106ba0") +
ggtitle("Dry-bulb Temperature") +
xlab("Date") +
ylab("Dry-bulb temperature [C]") +
theme_bw() +
facet_grid(rows = vars(station))
setwd("~/Documents/GitHub/Opti_Distri_Serum/run")
